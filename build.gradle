buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' 

ext.configFile = file('build.properties')

ext.config = parseConfig(configFile)

version = "${config.version}-${config.build_number}"
group = "vazkii.akashictome" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = config.mod_name

minecraft {
    mappings channel: 'snapshot', version: "${config.mc_mappings}"

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'

            mods {
                akashictome {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                akashictome {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'akashictome', '--all', '--output', file('src/generated/resources/')

            mods {
                akashictome {
                    source sourceSets.main
                }
            }
        }
    }
}
repositories {
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.mc_version}-${config.forge_version}"
}

jar {
    exclude "**/*.bat"
    exclude "**/*.psd"
}

/**
 * Increments the buildnumber in your config file, and saves it
 * Note: The doFirst is important, without it the build number
 * will be incremented every time tasks are configured, i.e every
 * time gradle is run on this project. 
 */
task incrementBuildNumber {
    doFirst {
        config.build_number = (config.build_number.toString().toInteger()) + 1
        configFile.withWriter {
            config.toProperties().store(it, "")
        }

        file('web/versions.ini').append("\n${project.version}=${config.mc_version}")
        file("${config.dir_repo}/version/${config.mc_version}.txt").write("${project.version}")
    }
}


import java.util.regex.Pattern

task sortArtifacts(type: Copy) {
    from jar.destinationDir
    into config.dir_output
    //Put each jar with a classifier in a subfolder with the classifier as its name
    eachFile {
        //This matcher is used to get the classifier of the jar
        def matcher = Pattern.compile("$config.mod_name $version-(?<classifier>\\w+).jar").matcher(it.name)
        //Only change the destination for full matches, i.e jars with classifiers
        if (matcher.matches()) {
            def classifier = matcher.group('classifier')
            /* Set the relative path to change the destination, since 
             * Gradle doesn't seem to like the absolute path being set*/
            it.relativePath = it.relativePath.parent.append(false, classifier, it.name)
        }
    }
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}


defaultTasks 'clean', 'build', 'sortArtifacts', 'incrementBuildNumber'